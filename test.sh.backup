#!/usr/bin/env bash
set -euo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_status() { echo -e "${GREEN}[TEST]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

print_status "Running build.sh"
./build.sh

failures=0

# Run unit tests with simple pass/fail check
print_status "Running unit tests (monitor)"
if ./output/monitor_test >/dev/null 2>&1; then
    print_status "Monitor unit tests: PASS"
else
    print_error "Monitor unit tests: FAIL"
    failures=$((failures+1))
fi

print_status "Running unit tests (consumer_producer)"
if ./output/consumer_producer_test >/dev/null 2>&1; then
    print_status "Consumer-producer unit tests: PASS"
else
    print_error "Consumer-producer unit tests: FAIL"
    failures=$((failures+1))
fi

# Simple functional tests
print_status "Testing basic uppercaser + logger"
EXPECTED="[logger] HELLO"
ACTUAL=$(echo -e "hello\n<END>" | ./output/analyzer 10 uppercaser logger | grep "\[logger\]" | head -n1)
if [[ "$ACTUAL" == "$EXPECTED" ]]; then
    print_status "uppercaser + logger: PASS"
else
    print_error "uppercaser + logger: FAIL (Expected '$EXPECTED', got '$ACTUAL')"
    failures=$((failures+1))
fi

print_status "Testing uppercaser + rotator + logger"
EXPECTED2="[logger] OHELL"
ACTUAL2=$(echo -e "hello\n<END>" | ./output/analyzer 10 uppercaser rotator logger | grep "\[logger\]" | head -n1)
if [[ "$ACTUAL2" == "$EXPECTED2" ]]; then
    print_status "uppercaser + rotator + logger: PASS"
else
    print_error "uppercaser + rotator + logger: FAIL (Expected '$EXPECTED2', got '$ACTUAL2')"
    failures=$((failures+1))
fi

print_status "Testing flipper + logger"
EXPECTED3="[logger] olleh"
ACTUAL3=$(echo -e "hello\n<END>" | ./output/analyzer 10 flipper logger | grep "\[logger\]" | head -n1)
if [[ "$ACTUAL3" == "$EXPECTED3" ]]; then
    print_status "flipper + logger: PASS"
else
    print_error "flipper + logger: FAIL (Expected '$EXPECTED3', got '$ACTUAL3')"
    failures=$((failures+1))
fi

print_status "Testing expander + logger"
EXPECTED4="[logger] h e l l o"
ACTUAL4=$(echo -e "hello\n<END>" | ./output/analyzer 10 expander logger | grep "\[logger\]" | head -n1)
if [[ "$ACTUAL4" == "$EXPECTED4" ]]; then
    print_status "expander + logger: PASS"
else
    print_error "expander + logger: FAIL (Expected '$EXPECTED4', got '$ACTUAL4')"
    failures=$((failures+1))
fi

print_status "Testing rotator + logger"
EXPECTED5="[logger] ohell"
ACTUAL5=$(echo -e "hello\n<END>" | ./output/analyzer 10 rotator logger | grep "\[logger\]" | head -n1)
if [[ "$ACTUAL5" == "$EXPECTED5" ]]; then
    print_status "rotator + logger: PASS"
else
    print_error "rotator + logger: FAIL (Expected '$EXPECTED5', got '$ACTUAL5')"
    failures=$((failures+1))
fi

print_status "Testing typewriter (with timeout)"
if timeout 10 bash -c "echo -e 'hi\n<END>' | ./output/analyzer 10 typewriter" | grep -q "\[typewriter\] hi"; then
    print_status "typewriter functionality: PASS"
else
    print_error "typewriter functionality: FAIL or TIMEOUT"
    failures=$((failures+1))
fi

print_status "Testing pipeline shutdown"
if echo -e "<END>" | ./output/analyzer 10 logger | grep -q "Pipeline shutdown complete"; then
    print_status "pipeline shutdown: PASS"
else
    print_error "pipeline shutdown: FAIL"
    failures=$((failures+1))
fi

# Error condition tests
print_status "Testing error conditions"

if ! ./output/analyzer >/dev/null 2>&1; then
    print_status "no arguments error: PASS"
else
    print_error "no arguments error: FAIL"
    failures=$((failures+1))
fi

if ! ./output/analyzer -5 logger >/dev/null 2>&1; then
    print_status "invalid queue size error: PASS"
else
    print_error "invalid queue size error: FAIL"
    failures=$((failures+1))
fi

if ! ./output/analyzer 10 nonexistent >/dev/null 2>&1; then
    print_status "invalid plugin error: PASS"
else
    print_error "invalid plugin error: FAIL"
    failures=$((failures+1))
fi

# Summary
if [[ $failures -eq 0 ]]; then
    print_status "All tests passed!"
    exit 0
else
    print_error "$failures test(s) failed"
    exit 1
fi